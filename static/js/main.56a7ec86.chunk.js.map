{"version":3,"sources":["component/signIn.js","component/Tchat.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","signIn","Container","className","Col","style","backgroundColor","onClick","provider","GoogleAuthProvider","signInWithPopup","firestore","ChatMessage","props","msgcontent","text","uid","name","messageClass","currentUser","messageClass2","marginBottom","textAlign","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","stopPropagation","nativeEvent","stopImmediatePropagation","preventDefault","user","photoURL","displayName","email","trim","add","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","maxHeight","minHeight","reverse","map","msg","id","ref","onSubmit","type","placeholder","value","outline","onChange","target","SignOut","signOut","App","useAuthState","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56a7ec86.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/firebase-auth'\nimport { Col, Container} from 'react-bootstrap';\nimport { FcGoogle } from \"react-icons/fc\";\n\n\nif (!firebase.apps.length) {\n    firebase.initializeApp({\n      apiKey: \"AIzaSyDTWBteXw0tA7hZ0OQCJmzl8q_6lcK18Jc\",\n      authDomain: \"hive-db3b9.firebaseapp.com\",\n      projectId: \"hive-db3b9\",\n      storageBucket: \"hive-db3b9.appspot.com\",\n      messagingSenderId: \"306107300911\",\n      appId: \"1:306107300911:web:42ab214d27d522768bdada\",\n      measurementId: \"G-H9W71X85WS\"\n    })\n  \n  }\n\nconst auth = firebase.auth();\n\nconst signIn = ()=> {\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider)\n      }\n    return (\n        <Container className=\"col-sm-6 signIn\">\n      <div className=\"rounded bg-dark shadow-lg\">\n        <Col className=\"col\">\n          <div className=\"row justify-content-center text-white rounded-top\" style={{backgroundColor:'black'}}>\n            \n             \n            \n            <h1 className=\"\"> log in </h1>\n          </div>\n               \n          <Col className=\"d-flex justify-content-center m-0 p-5\">\n            <button onClick={signInWithGoogle} className=\"btn btn-primary ml-2 mb-2 text-center\"><FcGoogle/> Sign in with Google</button>\n          </Col>\n\n        </Col>\n\n      </div>\n    </Container>\n    )\n}\n\nexport default signIn ;","\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/firebase-auth'\n\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\nimport { useRef, useState } from 'react';\nimport { AiOutlineSend } from 'react-icons/ai';\n\n\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nconst ChatRoom = () => {\n\n    const dummy = useRef() ;\n    const messagesRef = firestore.collection(\"Messages\")\n    const query = messagesRef.orderBy('createdAt' ,'desc').limit(50);\n    const [messages] = useCollectionData(query, { idField: 'id'});\n    const [formValue, setFormValue] = useState('');\n\n    \n    \n    const sendMessage = async(e) => {\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        e.preventDefault()\n        \n        const user = auth.currentUser ;\n        var uid, photoURL, name, email;\n        if (user != null) {\n          uid = user.uid\n          photoURL = user.photoURL\n          name = user.displayName\n          email= user.email\n        }\n        if (formValue.trim() !== '' ){\n          await messagesRef.add({\n            text: formValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL,\n            name,\n            email\n          });\n          \n          setFormValue('');\n          dummy.current.scrollIntoView({behavior : 'smooth'})\n         \n        }      \n        \n    }\n    \n   \n    return (\n      <div className=\"col-sm-12  p-0\" style={{maxHeight : '90vh' , minHeight : '87vh'}}>\n        <main className=\"tchatbox\">\n          \n          {messages && messages.reverse().map(msg => <ChatMessage key={msg.id} msgcontent={msg}/>)}\n          <div ref={dummy}></div>\n        </main>\n        <div className=\"row formex\">\n          <form onSubmit={sendMessage} className=\"pt-4\">\n            <input type=\"text\"  placeholder=\"enter a message\" className=\"formeiks ml-1\" value={formValue} style={{outline : 0 }} onChange={(e) => setFormValue(e.target.value)}/>\n  \n            <button type=\"submit\" className=\"send ml-3\" style={{outline : 0 }}>\n              <AiOutlineSend/>\n            </button>\n        \n          </form>\n        </div>\n        \n       \n      </div>\n    )\n}\nfunction ChatMessage(props){\n    const {text , uid, name} = props.msgcontent\n    const messageClass = uid === auth.currentUser.uid? 'sent' : 'received';\n    const messageClass2 = uid === auth.currentUser.uid? 'you' : 'theOthers';  \n    \n  \n    \n  \n  \n  \n    return (\n        <div className={` msgcontent m-0 ${messageClass}`} >\n          <div className={` msgcontent ${messageClass2}`} >\n            <div className=\"font-weight-bold font-italic\">\n              {name} \n            </div>\n            \n            <p style={{marginBottom: '0px' , textAlign: 'center'}}>{text}</p>\n          </div>\n        </div>\n    )\n  }\n\nexport default ChatRoom","import './App.css';\nimport {GiArtificialHive} from 'react-icons/gi' ;\n\nimport {  AiOutlineLogout } from 'react-icons/ai';\n\n\nimport React from 'react';\nimport SignIn  from './component/signIn';\nimport ChatRoom from './component/Tchat';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/firebase-auth'\n\nimport {useAuthState} from 'react-firebase-hooks/auth';\n\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyDTWBteXw0tA7hZ0OQCJmzl8q_6lcK18Jc\",\n    authDomain: \"hive-db3b9.firebaseapp.com\",\n    projectId: \"hive-db3b9\",\n    storageBucket: \"hive-db3b9.appspot.com\",\n    messagingSenderId: \"306107300911\",\n    appId: \"1:306107300911:web:42ab214d27d522768bdada\",\n    measurementId: \"G-H9W71X85WS\"\n  })\n\n}\n\nconst auth = firebase.auth();\n\n\nfunction App() {\n  const [user] = useAuthState(auth) ;\n  \n  return (\n    <div className=\"App\">\n      <header className=\"header d-flex justify-content-between flex-row shadow-lg\">\n        <SignOut />\n        \n        <h1 className=\"text-white\">Hive <small className=\"text-muted version\">(v.1)</small> </h1>\n        <h1  className=\"text-white\"><GiArtificialHive/></h1>\n      </header>\n      \n      <div className=\"h-100\" style={{}} >\n            {user ? <ChatRoom/> : <SignIn/>}\n      </div>\n      <footer>\n        \n      </footer>\n    </div>\n  );\n}\n\n\nfunction SignOut() {\n  return auth.currentUser && (\n    \n      <button onClick={() => auth.signOut()} className=\"m-2 button \"><AiOutlineLogout/> Sign Out</button>\n  )\n}\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}