{"version":3,"sources":["logo.svg","component/signIn.js","component/Tchat.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","signIn","firestore","Container","className","Col","style","backgroundColor","onClick","provider","GoogleAuthProvider","signInWithPopup","ChatMessage","props","msgcontent","text","uid","name","photoURL","messageClass","currentUser","messageClass2","marginBottom","textAlign","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","stopPropagation","nativeEvent","stopImmediatePropagation","preventDefault","user","displayName","email","trim","add","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","maxHeight","minHeight","map","msg","id","ref","onSubmit","type","placeholder","value","outline","onChange","target","SignOut","signOut","App","useAuthState","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f0cdb98.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/firebase-auth'\r\nimport { Col, Container, FormGroup, Row, Form, FormControl} from 'react-bootstrap';\r\nimport { FcGoogle } from \"react-icons/fc\";\r\n\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp({\r\n      apiKey: \"AIzaSyDTWBteXw0tA7hZ0OQCJmzl8q_6lcK18Jc\",\r\n      authDomain: \"hive-db3b9.firebaseapp.com\",\r\n      projectId: \"hive-db3b9\",\r\n      storageBucket: \"hive-db3b9.appspot.com\",\r\n      messagingSenderId: \"306107300911\",\r\n      appId: \"1:306107300911:web:42ab214d27d522768bdada\",\r\n      measurementId: \"G-H9W71X85WS\"\r\n    })\r\n  \r\n  }\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\nconst signIn = ()=> {\r\n    const signInWithGoogle = () => {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        auth.signInWithPopup(provider)\r\n      }\r\n      const signInWithEmail = () => {\r\n        const emailProvider = new firebase.auth.EmailAuthProvider();\r\n        auth.signInWithEmailAndPassword(emailProvider)\r\n      }\r\n    return (\r\n        <Container className=\"col-sm-6 signIn\">\r\n      <div className=\"rounded bg-dark shadow-lg\">\r\n        <Col className=\"col\">\r\n          <div className=\"row justify-content-center text-white rounded-top\" style={{backgroundColor:'black'}}>\r\n            \r\n             \r\n            \r\n            <h1 className=\"\"> log in </h1>\r\n          </div>\r\n               \r\n          <Col className=\"d-flex justify-content-center m-0 p-5\">\r\n            <button onClick={signInWithGoogle} className=\"btn btn-primary ml-2 mb-2 text-center\"><FcGoogle/> Sign in with Google</button>\r\n          </Col>\r\n\r\n        </Col>\r\n\r\n      </div>\r\n    </Container>\r\n    )\r\n}\r\n\r\nexport default signIn ;","\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/firebase-auth'\r\n\r\nimport {useAuthState} from 'react-firebase-hooks/auth';\r\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\r\nimport { useRef, useState } from 'react';\r\nimport { AiOutlineSend } from 'react-icons/ai';\r\n\r\n\r\n\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp({\r\n      apiKey: \"AIzaSyDTWBteXw0tA7hZ0OQCJmzl8q_6lcK18Jc\",\r\n      authDomain: \"hive-db3b9.firebaseapp.com\",\r\n      projectId: \"hive-db3b9\",\r\n      storageBucket: \"hive-db3b9.appspot.com\",\r\n      messagingSenderId: \"306107300911\",\r\n      appId: \"1:306107300911:web:42ab214d27d522768bdada\",\r\n      measurementId: \"G-H9W71X85WS\"\r\n    })\r\n  \r\n  }\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\nconst ChatRoom = () => {\r\n\r\n    const dummy = useRef() ;\r\n    const messagesRef = firestore.collection(\"Messages\")\r\n    const query = messagesRef.orderBy('createdAt').limit(25);\r\n    const [messages] = useCollectionData(query, {idField: 'id'});\r\n    const [formValue, setFormValue] = useState('');\r\n  \r\n    const sendMessage = async(e) => {\r\n        e.stopPropagation();\r\n        e.nativeEvent.stopImmediatePropagation();\r\n        e.preventDefault()\r\n        \r\n        const user = auth.currentUser ;\r\n        var uid, photoURL, name, email;\r\n        if (user != null) {\r\n          uid = user.uid\r\n          photoURL = user.photoURL\r\n          name = user.displayName\r\n          email= user.email\r\n        }\r\n        if (formValue.trim() !== '' ){\r\n          await messagesRef.add({\r\n            text: formValue,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n            uid,\r\n            photoURL,\r\n            name,\r\n            email\r\n          });\r\n          setFormValue('');\r\n          dummy.current.scrollIntoView({behavior : 'smooth'})\r\n        }      \r\n        \r\n    }\r\n    \r\n  \r\n    \r\n    return (\r\n      <div className=\"col-sm-12  p-0\" style={{maxHeight : '90vh' , minHeight : '87vh'}}>\r\n        <main className=\"tchatbox\">\r\n          {messages && messages.map(msg => <ChatMessage key={msg.id} msgcontent={msg}/>)}\r\n          <div ref={dummy}></div>\r\n        </main>\r\n        <div className=\"row formex\">\r\n          <form onSubmit={sendMessage} className=\"pt-4\">\r\n            <input type=\"text\"  placeholder=\"enter a message\" className=\"formeiks ml-1\" value={formValue} style={{outline : 0 }} onChange={(e) => setFormValue(e.target.value)}/>\r\n  \r\n            <button type=\"submit\" className=\"send ml-3\" style={{outline : 0 }}>\r\n              <AiOutlineSend/>\r\n            </button>\r\n        \r\n          </form>\r\n        </div>\r\n        \r\n       \r\n      </div>\r\n    )\r\n}\r\nfunction ChatMessage(props){\r\n    const {text , uid, photoURL, name} = props.msgcontent\r\n    const messageClass = uid === auth.currentUser.uid? 'sent' : 'received';\r\n    const messageClass2 = uid === auth.currentUser.uid? 'you' : 'theOthers';  \r\n    \r\n  \r\n    \r\n  \r\n  \r\n  \r\n    return (\r\n        <div className={` msgcontent m-0 ${messageClass}`} >\r\n          <div className={` msgcontent ${messageClass2}`} >\r\n            <div className=\"font-weight-bold font-italic\">\r\n              {name} \r\n            </div>\r\n            \r\n            <p style={{marginBottom: '0px' , textAlign: 'center'}}>{text}</p>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\nexport default ChatRoom","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {GiArtificialHive, GiPschentDoubleCrown} from 'react-icons/gi' ;\r\nimport { Col, Container, FormGroup, Row, Form, FormControl} from 'react-bootstrap';\r\nimport { AiOutlineLogin, AiOutlineLogout, AiOutlineSend } from 'react-icons/ai';\r\nimport { FcGoogle } from \"react-icons/fc\";\r\n\r\nimport React from 'react';\r\nimport SignIn  from './component/signIn';\r\nimport ChatRoom from './component/Tchat';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/firebase-auth'\r\n\r\nimport {useAuthState} from 'react-firebase-hooks/auth';\r\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\r\nimport { useState } from 'react';\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp({\r\n    apiKey: \"AIzaSyDTWBteXw0tA7hZ0OQCJmzl8q_6lcK18Jc\",\r\n    authDomain: \"hive-db3b9.firebaseapp.com\",\r\n    projectId: \"hive-db3b9\",\r\n    storageBucket: \"hive-db3b9.appspot.com\",\r\n    messagingSenderId: \"306107300911\",\r\n    appId: \"1:306107300911:web:42ab214d27d522768bdada\",\r\n    measurementId: \"G-H9W71X85WS\"\r\n  })\r\n\r\n}\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\n\r\nfunction App() {\r\n  const [user] = useAuthState(auth) ;\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"header d-flex justify-content-between flex-row shadow-lg\">\r\n        <SignOut />\r\n        \r\n        <h1 className=\"text-white\">Hive <small className=\"text-muted version\">(v.1)</small> </h1>\r\n        <h1  className=\"text-white\"><GiArtificialHive/></h1>\r\n      </header>\r\n      \r\n      <div className=\"h-100\" style={{}} >\r\n            {user ? <ChatRoom/> : <SignIn/>}\r\n      </div>\r\n      <footer>\r\n        \r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction SignOut() {\r\n  return auth.currentUser && (\r\n    \r\n      <button onClick={() => auth.signOut()} className=\"m-2 button \"><AiOutlineLogout/> Sign Out</button>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}